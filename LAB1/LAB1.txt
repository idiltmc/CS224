CS224
Lab 1
Section 3
Ä°dil Atmaca
22002491
06/10/2022




##
## Program1.asm - prints out "hello world"
##
##	a0 - points to the string
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start 

__start:		# execution starts here
	la $a0,str	# put string address into a0
	li $v0,4	# system call to print
	syscall		#   out a string

	li $v0,10  # system call to exit
	syscall	#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
str:	.asciiz "Sepehr\n"
n:	.word	10

##
## end of file Program1.asm



##
## Program2.asm asks user for temperature in Celsius,
##  converts to Fahrenheit, prints the result.
##
##	v0 - reads in Celsius
##	t0 - holds Fahrenheit result
##	a0 - points to output strings
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	mul $t0,$t0,9	# to convert,multiply by 9,
	div $t0,$t0,5	# divide by 5, then
	add $t0,$t0,32	# add 32

	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t0	# print integer result
	li $v0,1		# using syscall 1
	syscall

	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
prompt:	.asciiz "Enter temperature (Celsius): "
ans1:	.asciiz "The temperature in Fahrenheit is "
endl:	.asciiz "\n"

##
## end of file Program2.asm


##
##	Program3.asm is a loop implementation
##	of the Fibonacci function
##        1 1 2 3 5 8 13 21

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
.globl __start
 
__start:		# execution starts here
	li $a0,7	# to calculate fib(7)
	jal fib		# call fib
	move $a0,$v0	# print result
	li $v0, 1
	syscall

	la $a0,endl	# print newline
	li $v0,4
	syscall

	li $v0,10
	syscall
		# bye bye

#------------------------------------------------


fib:	move $v0,$a0	# initialise last element
	blt $a0,2,done	# fib(0)=0, fib(1)=1

	li $t0,0	# second last element
	li $v0,1	# last element

loop:	add $t1,$t0,$v0	# get next value
	move $t0,$v0	# update second last
	move $v0,$t1	# update last element
	sub $a0,$a0,1	# decrement count
	bgt $a0,1,loop	# exit loop when count=0
done:	jr $ra

#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
endl:	.asciiz "\n"

##
## end of Program3.asm

## Idil Atmaca 22002491
## CS224-3 LAB1 Q3


## x = ((2 *a - b) /c ) * (a - b)


	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	sw $v0,a #initialize the number a
	
	
	la $a0,prompt2	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	sw $v0,b #initialize the number b
	
	
	la $a0,prompt3	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	sw $v0,c #initialize the number c
	
	
	
	
	lw $t0,a
	lw $t1,b
	lw $t2,c
	lw $t3,x
	
	
	jal calculation ##calculate the formula
	
		
	beq $t2,$zero,undefined

	la $a0,ans1	# print string before result
	li $v0,4
	syscall
	
	move $a0,$t3	# get the value of the current index
	li $v0, 1 # print the current element
	syscall


	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye

	
	## x = (2 *a - b) / (a + b)
	calculation:
		li $t5,2  #coeffiecient for a
		mult $t0,$t5   ##2 *a
		mflo $t3  ## x = 2 *a 
		
		mult $t3,$t1
		mflo $t3  ## x = 2 *a * b

		div $t3, $t2
		mflo $t3 ## x = (2 *a * b) / c
		mfhi $t4 ## x = (2 *a * b) mod c
		
		sub $t0,$t0,$t2 ##(a - c)
		
		mult $t3,$t0  ## ((2 *a * b) / c) * (a - c)
		mflo $t3
		
			
		
	jr $ra

	
	undefined:
		la $a0,res	# print string before result
		li $v0,4
		syscall
		
		li $v0,10		# system call to exit
		syscall		#    bye bye
		
		
				
			


#					 	#
#     	 data segment		

	.data
a: .word 0
b: .word 0
c: .word 0
x: .word 0	
prompt:	.asciiz "Enter a value for a: "
prompt2:.asciiz "Enter a value for b: "
prompt3:.asciiz "Enter a value for c: "
res: .asciiz "UNDEFINED "
ans1:	.asciiz "x = "
endl:	.asciiz "\n"

##
## end of file lab1Q3.asm

##
## LAB1 Question 4
##  Idil Atmaca 22002491 CS224-3

##	implementing a program with a simple menu that involve loop 


	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	sw $v0, customSize #get the inputed value and store it in customSize variable
	jal readArrayValues  #jump to the function readArrayValues
	jal printArray  #jump to the function printArray
	
	
	jal displayMenu
	
	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall	
			
	li $v0,10		# system call to exit
	syscall		#    bye bye
	
	
	
	displayMenu:
	
		
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall	
	
		la $a0,menu1	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall	
		
		la $a0,menu2	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall	
		
		
		la $a0,menu3	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall	
		
		la $a0,menu4	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall	
		
		
		
		## choices for the user
		li $t0, 'a'
		li $t1,'b'
		li $t2,'c'
		li $t3, 'd'
		
		li $v0, 12 # v0 contains char
		syscall
		
		## make the given instruction
		beq $v0,$t0,greaterSummation
		beq $v0,$t1,oddAndEvenSums
		beq $v0,$t2,numberOfOccurrences
		beq $v0,$t3,return	
		
			
		##print an error message if none of the above instructions are choosen
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall		
			
		la $a0,errorMsg	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall
		
		jal displayMenu
						
		
		
				
	#reads inputted values from the user one by one
	readArrayValues:
		lw $t1, customSize #get the array size identified by the user and load to t1
		la $t0, arr #get the address of the array and put it into t0 (now $t0 points to beginning of the array)
		
		beq $zero,$t1,return #checks for array size 0		
		
		readValue:
		
			la $a0,prompt1	# output prompt message for getting each item in the array
			li $v0,4	# syscall 4 prints the string
			syscall
			
			li $v0,5 #read the value at current index
			syscall
			sw $v0,0($t0) #get the read value and put it to current addres of the array
			addi $t0, $t0, 4 #update the addres of the array
			subi $t1,$t1,1 #update counter
			bgt $t1, $zero, readValue #go through the readValue function until all the elements are finalized
		jr $ra
	
	
	
	# $t2 return to the sumamtion of all numbers in the array
	summation:
		la $t0, arr
		lw $t1, customSize
		li $t2,0
		
		next:
			lw $t3,0($t0)
			add $t2,$t2,$t3
			addi $t0, $t0, 4 #update the addres of the array
			subi $t1,$t1,1 #update counter
			bgt $t1, $zero, next #go through the readValue function until all the elements are finalized
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall	
		j position
		
	
	oddAndEvenSums:
	
		#calculate the sum of all numbers to use later on
		jal summation
		
		position:
		
		#store the sum in the register for even summation
		li $t6,0
		add $t6,$t6,$t2
		
		
		##find the odd summation
		jal oddSummation
		returnPlace:
		
		##find even summation
		sub $t6,$t6,$t2
		
		
		##print odd sum result
		la $a0,oddSumMsg	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall
	
		move $a0,$t2	# get the value of the current index
		li $v0, 1 # print the current element
		syscall


		##print even sum result
		la $a0,endl	# system call to print
		li $v0,4		# out a newline
		syscall	
				
		la $a0,evenSumMsg	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall
		
		
		move $a0,$t6	# get the even number sum
		li $v0, 1 # print the current element
		syscall	
		
	jal displayMenu  ##go back to the menu
	
	#returns with $t2
	oddSummation:
		la $t0, arr
		lw $t1, customSize
		li $t2,0
		
		
		nxt:
			lw $t3,0($t0)
			li $t4,2
			div $t3,$t4
			mfhi $t4  #checking if the current number is a even or odd num
			
			addi $t0, $t0, 4 #update the addres of the array
			subi $t1,$t1,1 #update counter
			
			beq $t4, 1, addItem  ##if the current number is odd, add it to the sum
			beq $t4, -1, addItem  ##if the current number is odd, add it to the sum
			returnPos:
			
			bgt $t1, $zero, nxt #go through the readValue function until all the elements are finalized
			
		
		
		j returnPlace	
		addItem:
			add $t2,$t2,$t3
			j returnPos
				
		
	
	##find the sum of numbers that are greater than the input number
	greaterSummation:
	
		la $t0, arr
		lw $t1, customSize
		li $t2,0
		
		la $a0,inputMsg	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall

		li $v0, 5	# syscall 5 reads an integer
		syscall
		
		
		##store ethe input number
		sw $v0,inputNum
		lw $t4,inputNum
		
		greaterNext:
			lw $t3,0($t0)
			
			addi $t0, $t0, 4 #update the addres of the array
			subi $t1,$t1,1 #update counter
			bgt $t3, $t4, addItem2  ##add the current to the sum if it is greater than the input number
			position2:
			bgt $t1, $zero, greaterNext #go through the function until all the elements are finalized
			
			
			##print result	
			la $a0,endl	# system call to print
			li $v0,4		# out a newline
			syscall	
			
			
			la $a0,greaterSumMsg	# output prompt message on terminal
			li $v0,4	# syscall 4 prints the string
			syscall
		
			move $a0,$t2	# get the even number sum
			li $v0, 1 # print the current element
			syscall	
		
			jal displayMenu	 ##go back to menu
			
			
			addItem2:
			add $t2,$t2,$t3 ##update sum
			j position2	
				
	##find the total number of occurrences that are divsible by the input number	
	numberOfOccurrences:
	
		la $t0, arr
		lw $t1, customSize
		li $t2,0
		
		la $a0,inputMsg	# output prompt message on terminal
		li $v0,4	# syscall 4 prints the string
		syscall

		li $v0, 5	# syscall 5 reads an integer
		syscall
		
		
		#initialize the input value
		sw $v0,inputNum
		lw $t4,inputNum
		
		
		occurNext:
			lw $t3,0($t0)
			
			addi $t0, $t0, 4 #update the addres of the array
			subi $t1,$t1,1 #update counter
			
			div $t3,$t4
			mfhi $t3
			
			beq $t3,$zero,increase  ##if the current is divisible by the input, increase the num of occurences
			
			position3:
			bgt $t1, $zero, occurNext #go through the function until all the elements are finalized
			
			
			
			##print result
			la $a0,endl	# system call to print
			li $v0,4		# out a newline
			syscall	
				
			la $a0,occurMsg	# output prompt message on terminal
			li $v0,4	# syscall 4 prints the string
			syscall
		
			move $a0,$t2	# get the even number sum
			li $v0, 1 # print the current element
			syscall	
		
			jal displayMenu	 ##go back to the menu
			
			
			increase:
			addi $t2,$t2,1
			j position3	
	
	
	
	printArray:
		la $t0, arr #get the array pointers' addres
		lw $t1, customSize #get the array size identified by the user and load to t1
		la $a0,printMsg	# output prompt message for getting each item in the array
		li $v0,4	# syscall 4 prints the string
		syscall
		printElement:
			lw $a0,0($t0)	# get the value of the current index
			li $v0, 1 # print the current element
			syscall
			addi $t0,$t0,4
			subi $t1,$t1,1
			
			
			#add space between the elements
			space:
			la $a0,space0	# output prompt message on terminal
			li $v0,4	# syscall 4 prints the string
			syscall
			
			bgt $t1, $zero, printElement
			
			
		subi $t0,$t0,4 #t0 points to the last element on the array
		
		
		
		jr $ra	
	
		
	## quit the program			
	return:
			li $v0,10	# system call to exit
			syscall		#    bye bye	
		jr $ra		
			
			
			
			
			
	

	


#################################
#     	 data segment		#

	.data
prompt:	.asciiz "Enter the size of the array: "
prompt1:.asciiz "Enter the next value in the array: "
printMsg: .asciiz "Array items are: "
reversedMsg: .asciiz "(reversed) "
inputMsg: .asciiz "Please enter a number: "
errorMsg:  .asciiz "INVALID, please try again: "
sumMsg: .asciiz "Sum of all array items are: "
oddSumMsg: .asciiz "Sum of all odd numbers in array: "
evenSumMsg: .asciiz "Sum of all even numbers in array: "
greaterSumMsg:  .asciiz "Sum of numbers greater than an input number: "
occurMsg: .asciiz "Number of occurrences divisible by the input: "
menu1: .asciiz "a. Find summation of numbers stored in the array which is greater than an input number."
menu2: .asciiz "b. Find summation of even and odd numbers and display them."
menu3: .asciiz "c. Display the number of occurrences of the array elements divisible by a certain input number"
menu4: .asciiz "d. Quit."

.align 2
arr: .space 400 #creates an array of maximum size of 20 elements
sum: .word 0
inputNum: .word 0
customSize: .word 0 #size of the array
endl:	.asciiz "\n"
space0: .asciiz " "


##
## end of file lab1Q4.asm







